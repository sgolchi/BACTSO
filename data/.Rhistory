}
trial0 = RAR_sim(3, theta0, nb = 10, response.type = 'count')
data_plot(trial0)
psup_plot(trial0)
post_plot(trial0)
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 10, response.type = 'count')
psup_plot(trial0)
data_plot(trial0)
post_plot(trial0)
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 10, response.type = 'count')
warnings()
post_plot(trial0)
data_plot(trial0)
psup_plot(trial0)
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 1, response.type = 'count')
psup_plot(trial0)
data_plot(trial0)
post_plot(trial0)
Gibbs = function(theta, y, x, q, response.type) {
if (response.type == 'count') ng = 10
else ng = 1
n = length(q)
new = theta + q*rnorm(n)
for (j  in 1:ng) {
for (i in 1:length(theta)) {
new_th = theta
new_th[i] = new[i]
lp = lpost(theta, y, x, response.type = response.type)
lpnew = lpost(new_th, y, x, response.type = response.type)
p = min(1, exp(lpnew - lp))
if (runif(1) <= p) theta = new_th
}
}
return(theta)
}
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 1, response.type = 'binary')
Gibbs = function(theta, y, x, q, response.type) {
n = length(q)
new = theta + q*rnorm(n)
for (j  in 1:ng) {
for (i in 1:length(theta)) {
new_th = theta
new_th[i] = new[i]
lp = lpost(theta, y, x, response.type = response.type)
lpnew = lpost(new_th, y, x, response.type = response.type)
p = min(1, exp(lpnew - lp))
if (runif(1) <= p) theta = new_th
}
}
return(theta)
}
post_plot(trial0)
data_plot(trial0)
psup_plot(trial0)
RAR_sim = function(nt, theta0, nb = 1, maxN = 500, N = 1000, upper = 0.95, lower = .05,
burn = 10*nt, response.type = 'binary') {
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
y = NULL
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
psup = array(rep(1/nt, nt), dim = c(nt, 1))
repeat {
j = j + 1
xb = rmultinom(nb, 1, prob = sqrt(psup[,j]))
if (response.type == 'binary') {
yb = apply(t(xb)%*%theta0, 1, function(z) rbinom(1, 1, prob = 1/(1+exp(-rnorm(1, z, 1)))))
}
if (response.type == 'count') {
yb = apply(t(xb)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
x = abind(x, xb, along = 2)
y = c(y, yb)
theta_new = SMC_step(theta[,,j], x = xb, y = yb, N = N, response.type)
q = apply(theta_new, 2, sd)/3
theta_new = t(apply(theta_new, 1, Gibbs, y = y, x = x[,-1], q = q, response.type = response.type, ng))
theta = abind(theta, theta_new, along = 3)
check = t(apply(theta[,,j+1], 1, sup_check))
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
psup[psup[,j+1] < lower | psup[,j] ==0,j+1] = 0
if (max(psup[,j+1]) > upper | length(y) > maxN) break
}
out = list(psup = psup, theta = theta, y = y, x = x[,-1])
class(out) = 'trial'
return(out)
}
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 1, response.type = 'count')
Gibbs = function(theta, y, x, q, response.type, ng) {
n = length(q)
new = theta + q*rnorm(n)
for (j  in 1:ng) {
for (i in 1:length(theta)) {
new_th = theta
new_th[i] = new[i]
lp = lpost(theta, y, x, response.type = response.type)
lpnew = lpost(new_th, y, x, response.type = response.type)
p = min(1, exp(lpnew - lp))
if (runif(1) <= p) theta = new_th
}
}
return(theta)
}
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 1, response.type = 'count')
psup_plot(trial0)
data_plot(trial0)
post_plot(trial0)
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 2, response.type = 'count')
post_plot(trial0)
data_plot(trial0)
psup_plot(trial0)
trial0 = RAR_sim(5, c(1.2, .4, 0, 0, -.4), nb = 3, response.type = 'count')
psup_plot(trial0)
data_plot(trial0)
post_plot(trial0)
x
y = c()
for (i in 1:41) y[i] = rnorm(1,t(x[,i])%*%theta0,1)
nt
treat = 1:nt
df = data.frame(cbind(y, t(x)%*%treat, 1:length(y)))
names(df) = c('response', 'treatment', 'patient')
df$treatment = as.factor(df$treatment)
if (all(y %in% c(0,1))) df$response = as.factor(df$response)
p = ggplot(df, aes(x = patient, y = response, color = response)) +
geom_point(size = 3) + facet_grid(treatment ~ ., labeller = label_both)
p
treat
df
shiny::runApp('Dropbox/clinical_trials/App_01')
dim(xb)
dim(x)
rownames(x)
rowMeans(x)
rowSums(x)
t(x)%*%y
y
x%*%y
x%*%y/rowMeans(x)
(x%*%y)/rowMeans(x)
(x%*%y)/rowSums(x)
post = function(yb, xb, prior, ysd) {
if (length(y) > 0) {
nb = rowSums(xb)
mp = prior[,1]
sdp = prior[,2]
ybar = (xb%*%yb)/rowSums(xb)
var = 1 / (nb/ysd^2 + 1/sdp^2)
post_mean = var * (mp/sdp^2 + nb*ybar/ysd^2)
out = cbind(post_mean, post.sd = sqrt(var))
}
else out = cbind(rep(0, nrow(prior)), rep(0, nrow(prior)))
return(out)
}
nt
theta0
nb = 1, maxN = 500, N = 1000, upper = 0.95, lower = .05,
burn = 10*nt, response.type
nb = 1; maxN = 500; N = 1000; upper = 0.95; lower = .05;
burn = 10*nt; response.type
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
y = NULL
post0 = cbind(rep(0, nt), rep(10, nt))
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
psup = array(rep(1/nt, nt), dim = c(nt, 1))
response.type  ='continuous'
j = j + 1
xb = rmultinom(nb, 1, prob = sqrt(psup[,j]))
if (response.type == 'binary') {
yb = apply(t(xb)%*%theta0, 1, function(z) rbinom(1, 1, prob = 1/(1+exp(-rnorm(1, z, 1)))))
}
if (response.type == 'count') {
yb = apply(t(xb)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'continuous') {
yb = apply(t(xb)%*%theta0, 1, function(z) rnorm(1, z))
}
yb
x = abind(x, xb, along = 2)
y = c(y, yb)
y
if (response.type == 'continuous') {
post0 = post(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
ysd = ifelse(length(y) == 1, 1, sd(y))
ysd
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
y = NULL
post0 = cbind(rep(0, nt), rep(10, nt))
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
psup = array(rep(1/nt, nt), dim = c(nt, 1))
j = j + 1
xb = rmultinom(nb, 1, prob = sqrt(psup[,j]))
if (response.type == 'binary') {
yb = apply(t(xb)%*%theta0, 1, function(z) rbinom(1, 1, prob = 1/(1+exp(-rnorm(1, z, 1)))))
}
if (response.type == 'count') {
yb = apply(t(xb)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'continuous') {
yb = apply(t(xb)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
y = c(y, yb)
ysd = ifelse(length(y) == 1, 1, sd(y))
if (response.type == 'binary' | response.type == 'count') {
theta_new = SMC_step(theta[,,j], x = xb, y = yb, N = N, response.type)
q = apply(theta_new, 2, sd)/3
theta_new = t(apply(theta_new, 1, Gibbs, y = y, x = x[,-1], q = q, response.type = response.type, ng))
}
if (response.type == 'continuous') {
post0 = post(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
post0
xb
xb%*%yb
rowSums(xb)
ybar = (xb%*%yb)/rowSums(xb)
ybar[is.na(ybar)] = 0
ybar
post = function(yb, xb, prior, ysd) {
if (length(y) > 0) {
nb = rowSums(xb)
mp = prior[,1]
sdp = prior[,2]
ybar = (xb%*%yb)/rowSums(xb)
ybar[is.na(ybar)] = 0
var = 1 / (nb/ysd^2 + 1/sdp^2)
post_mean = var * (mp/sdp^2 + nb*ybar/ysd^2)
out = cbind(post_mean, post.sd = sqrt(var))
}
else out = cbind(rep(0, nrow(prior)), rep(0, nrow(prior)))
return(out)
}
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
y = NULL
post0 = cbind(rep(0, nt), rep(10, nt))
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
psup = array(rep(1/nt, nt), dim = c(nt, 1))
j = j + 1
xb = rmultinom(nb, 1, prob = sqrt(psup[,j]))
if (response.type == 'binary') {
yb = apply(t(xb)%*%theta0, 1, function(z) rbinom(1, 1, prob = 1/(1+exp(-rnorm(1, z, 1)))))
}
if (response.type == 'count') {
yb = apply(t(xb)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'continuous') {
yb = apply(t(xb)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
y = c(y, yb)
ysd = ifelse(length(y) == 1, 1, sd(y))
if (response.type == 'binary' | response.type == 'count') {
theta_new = SMC_step(theta[,,j], x = xb, y = yb, N = N, response.type)
q = apply(theta_new, 2, sd)/3
theta_new = t(apply(theta_new, 1, Gibbs, y = y, x = x[,-1], q = q, response.type = response.type, ng))
}
if (response.type == 'continuous') {
post0 = post(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
hist(theta_new)
hist(theta_new[,1])
hist(theta_new[,2])
hist(theta_new[,3])
xb
RAR_sim = function(nt, theta0, nb = 1, maxN = 500, N = 1000, upper = 0.95, lower = .05,
burn = 10*nt, response.type) {
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
y = NULL
post0 = cbind(rep(0, nt), rep(10, nt))
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
psup = array(rep(1/nt, nt), dim = c(nt, 1))
repeat {
j = j + 1
xb = rmultinom(nb, 1, prob = sqrt(psup[,j]))
if (response.type == 'binary') {
yb = apply(t(xb)%*%theta0, 1, function(z) rbinom(1, 1, prob = 1/(1+exp(-rnorm(1, z, 1)))))
}
if (response.type == 'count') {
yb = apply(t(xb)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'continuous') {
yb = apply(t(xb)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
y = c(y, yb)
ysd = ifelse(length(y) == 1, 1, sd(y))
if (response.type == 'binary' | response.type == 'count') {
theta_new = SMC_step(theta[,,j], x = xb, y = yb, N = N, response.type)
q = apply(theta_new, 2, sd)/3
theta_new = t(apply(theta_new, 1, Gibbs, y = y, x = x[,-1], q = q, response.type = response.type, ng))
}
if (response.type == 'continuous') {
post0 = post(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
theta = abind(theta, theta_new, along = 3)
check = t(apply(theta[,,j+1], 1, sup_check))
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
psup[psup[,j+1] < lower | psup[,j] ==0,j+1] = 0
if (max(psup[,j+1]) > upper | length(y) > maxN) break
}
out = list(psup = psup, theta = theta, y = y, x = x[,-1])
class(out) = 'trial'
return(out)
}
RAR_sim(3, theta0, response.type = 'continuous')
trial0 = RAR_sim(3, theta0, response.type = 'continuous')
data_plot(trial0)
psup_plot(trial0)
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, .5), response.type = 'continuous')
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, .5), nb = 5, response.type = 'continuous')
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, .5), nb = 15, response.type = 'continuous')
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, .5), nb = 15, response.type = 'binary')
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, .5), nb = 15, response.type = 'binary')
trial0 = RAR_sim(3, c(.2, 0, .5), nb = 5, response.type = 'binary')
trial0 = RAR_sim(3, c(.2, 0, .5), nb = 5, maxN = 200, response.type = 'binary')
post_plot(trial0)
psup_plot(trial0)
data_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, .9), nb = 5, maxN = 200, response.type = 'binary')
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 5, maxN = 200, response.type = 'binary')
RAR_sim = function(nt, theta0, nb = 1, maxN = 500, N = 1000, upper = 0.95, lower = .05,
burn = 10*nt, response.type = 'binary') {
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
y = NULL
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
psup = array(rep(1/nt, nt), dim = c(nt, 1))
repeat {
j = j + 1
xb = rmultinom(nb, 1, prob = sqrt(psup[,j]))
if (response.type == 'binary') {
yb = apply(t(xb)%*%theta0, 1, function(z) rbinom(1, 1, prob = 1/(1+exp(-rnorm(1, z, 1)))))
}
if (response.type == 'count') {
yb = apply(t(xb)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
x = abind(x, xb, along = 2)
y = c(y, yb)
theta_new = SMC_step(theta[,,j], x = xb, y = yb, N = N, response.type)
q = apply(theta_new, 2, sd)/3
theta_new = t(apply(theta_new, 1, Gibbs, y = y, x = x[,-1], q = q, response.type = response.type, ng))
theta = abind(theta, theta_new, along = 3)
check = t(apply(theta[,,j+1], 1, sup_check))
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
psup[psup[,j+1] < lower | psup[,j] ==0,j+1] = 0
if (max(psup[,j+1]) > upper | length(y) > maxN) break
}
out = list(psup = psup, theta = theta, y = y, x = x[,-1])
class(out) = 'trial'
return(out)
}
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 5, maxN = 200, response.type = 'binary')
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'binary')
data_plot(trial0)
psup_plot(trial0)
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 5, maxN = 200, response.type = 'binary')
post_plot(trial0)
data_plot(trial0)
RAR_sim = function(nt, theta0, nb = 1, maxN = 500, N = 1000, upper = 0.95, lower = .05,
burn = 10*nt, response.type) {
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
y = NULL
post0 = cbind(rep(0, nt), rep(10, nt))
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
psup = array(rep(1/nt, nt), dim = c(nt, 1))
repeat {
j = j + 1
xb = rmultinom(nb, 1, prob = sqrt(psup[,j]))
if (response.type == 'binary') {
yb = apply(t(xb)%*%theta0, 1, function(z) rbinom(1, 1, prob = 1/(1+exp(-rnorm(1, z, 1)))))
}
if (response.type == 'count') {
yb = apply(t(xb)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'continuous') {
yb = apply(t(xb)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
y = c(y, yb)
ysd = ifelse(length(y) == 1, 1, sd(y))
if (response.type == 'binary' | response.type == 'count') {
theta_new = SMC_step(theta[,,j], x = xb, y = yb, N = N, response.type)
q = apply(theta_new, 2, sd)/3
theta_new = t(apply(theta_new, 1, Gibbs, y = y, x = x[,-1], q = q, response.type = response.type, ng))
}
if (response.type == 'continuous') {
post0 = post(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
theta = abind(theta, theta_new, along = 3)
check = t(apply(theta[,,j+1], 1, sup_check))
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
psup[psup[,j+1] < lower | psup[,j] ==0,j+1] = 0
if (max(psup[,j+1]) > upper | length(y) > maxN) break
}
out = list(psup = psup, theta = theta, y = y, x = x[,-1])
class(out) = 'trial'
return(out)
}
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'binary')
data_plot(trial0)
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'count')
data_plot(trial0)
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'contineous')
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'continuous')
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'continuous')
post_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'continuous')
post_plot(trial0)
data_plot(trial0)
psup_plot(trial0)
trial0 = RAR_sim(3, c(.2, 0, 1.2), nb = 1, maxN = 200, response.type = 'binary')
data_plot(trial0)
psup_plot(trial0)
post_plot(trial0)
load("~/Dropbox/clinical_trials/additivity_paper/add.adp/data/extreme_results_1.RData")
View(sim_df)
2094/2
ss = function(par){
P_a = par[1]
P_b = par[2]
p = par[3]
P_ab = logistic(max(logit(P_a), logit(P_b)) + p * min(logit(P_a), logit(P_b)))
n1 = floor(((P_a * (1 - P_a) + P_ab * (1 - P_ab)) / (P_a - P_ab)^2)* 7.9)
n2 = floor(((P_b * (1 - P_b) + P_ab * (1 - P_ab)) / (P_b - P_ab)^2)* 7.9)
return(max(n1, 2))
}
ss(c(.35,.4,.5))
logit = function(P) return(- log(P/(1-P)))
logistic = function(theta) return( 1 -  exp(theta)/(1 + exp(theta)))
ss(c(.35,.4,.5))
ss(c(.35,.4,.75))
5235/5
ss(c(.4,.4,.75))
ss(c(.4,.4,.5))
floor(1745*3/5)
mean(sim_df$nb[P_a = .35 & P_b = .4 & p = 0])
mean(sim_df$nb[P_a == .35 & P_b == .4 & p == 0])
mean(sim_df$nb[sim_df$P_a == .35 & sim_df$P_b == .4 & sim_df$p == 0])
1047*3
load("extreme_results_1.RData")
setwd("~/Dropbox/clinical_trials/additivity_paper")
load("extreme_results_1.RData")
setwd("~/Dropbox/clinical_trials/additivity_paper/add.adp/data")
load("extreme_results_1.RData")
library(dplyr)
library(ggplot2)
sdf = sim_df %>%
group_by(fact, p, model) %>%
summarise(EFP = mean(FP), MSE_a = sqrt(mean(MSE_a0)), MSE_b = sqrt(mean(MSE_b0)), MSE_ab = sqrt(mean(MSE_ab0)),
bias_a = mean(bias_a), bias_b = mean(bias_b), bias_ab = mean(bias_ab),
ESS = mean(RN))
View(sdf)
names(sdf)[names(sdf) == "p"] = "f"
plot7 = ggplot(sdf, aes(x = fact, y = ESS, fill = model )) +
geom_bar(stat = "identity", position = position_dodge(), color = 'grey40', width = 0.5) +
xlab("") + ylab('Expected sample size') + scale_fill_brewer(palette="Set2") + facet_grid(f ~ ., labeller = label_both)
plot7
max(sdf$ESS)
ss(p(.4,.4,0))
ss(c(.4,.4,0))
ss(c(.4,.4,.5))
1637*3/5
982*3
982*5
982*4
mean(sim_df$nb[sim_df$P_a == .4 & sim_df$P_b == .4 & sim_df$p == 0])
3.5 * 982
View(sim_df)
mean(sim_df$RN[sim_df$P_a == .4 & sim_df$P_b == .4 & sim_df$p == 0])
mean(sim_df$RN[sim_df$P_a == .4 & sim_df$P_b == .4 & sim_df$p == 0 $ sim_df$model == "FA_biased_0.5"])
mean(sim_df$RN[sim_df$P_a == .4 & sim_df$P_b == .4 & sim_df$p == 0 & sim_df$model == "FA_biased_0.5"])
mean(sim_df$nb[sim_df$P_a == .4 & sim_df$P_b == .4 & sim_df$p == 0 & sim_df$model == "FA_biased_0.5"])
4.4 * 982
ss(c(.4,.4,.5))
1637*3
789*3
table(sim_df$model)
